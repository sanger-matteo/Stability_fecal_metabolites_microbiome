corrplot::corrplot( as.matrix(corr_wide),
p.mat=as.matrix(pval_wide),
sig.level=0.05,
is.corr=F,    # to plot a matrix with corrplot func(), but no operations
insig = 'label_sig' ,  method='circle',
cl.pos='n', tl.col='#4d4d4d',
tl.cex = 2)
dev.off()
# Re-import plot as TIFF image
image <- tiff::readTIFF( tiff_file, native = TRUE)
# Create a dummy data frame for plotting, plot and convert to a "gtable"
data <- data.frame(x = c(0, 0), y = c(1, 1))
dummy_hnd <- ggplot(data, aes(x, y)) +  geom_point()
dummy_hnd <- ggplotGrob(dummy_hnd)
# Save logo as grob object
grob <- grid::rasterGrob(image, x = 0, y = 0, just = c('left', 'bottom'), width = 1, height = 1)
# Insert grob in gtable
dummy_hnd <- gtable::gtable_add_grob( dummy_hnd, grob, t = 1, l = 1, b = dim(dummy_hnd)[1], r = dim(dummy_hnd)[2] )
# Add grob "logo" as annotation, basically overlaying with void theme on top of the other plot
hnd_A <- ggplot() +
annotation_custom(dummy_hnd, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
theme_void()
hnd_A
# --- COMBINE sub-Figures ------------------------------------------------------
# Place sub-plots together the sub-Figure letter
library("cowplot")
ggdraw()
ggdraw() +
draw_plot(hnd_A, x = 0, y = 0, width = 1, height = 1) +
draw_plot_label(label = c(paste0("A")), size = 17, x = c(0), y = c(1))
# Save location
path_saveFig <- "/Users/mattesa/ZenBook/R/Fecal_Chenomx_results/Figures/"
ggsave( paste0( path_saveFig, "Figure_33_PartialSpearman.tiff"), width=10, height=7.5, dpi=300)
# For the supplementary figure (with rank FAMILY or [[aggreg_at_rank]]) save in different file
# ggsave( paste0( path_saveFig, "Suppl_Figure_4_A.tiff"), width=10, height=7.5, dpi=300)
# Opt B - Plot using corrplot library
# Create temp saveing file
path_saveFig <- "/Users/mattesa/ZenBook/R/Fecal_Chenomx_results/Figures/"
tiff_file <- paste0(path_saveFig, "sub_Figure_3_A.tiff")
tiff( tiff_file, res=200, pointsize=7, width=2800, height=2100)
#
# corrplot::corrplot( as.matrix(corr_wide),
#                     p.mat=as.matrix(pval_wide),
#                     sig.level=0.05,
#                     is.corr=F,    # to plot a matrix with corrplot func(), but no operations
#                     insig='blank',  method='circle',
#                     cl.pos='n', tl.col='#4d4d4d',
#                     tl.cex = 2)
# dev.off()
corrplot::corrplot( as.matrix(corr_wide),
p.mat=as.matrix(pval_wide),
sig.level=0.05,
is.corr=F,    # to plot a matrix with corrplot func(), but no operations
insig = 'label_sig' ,  method='circle',
cl.pos='n', tl.col='#4d4d4d',
tl.cex = 2)
dev.off()
# Re-import plot as TIFF image
image <- tiff::readTIFF( tiff_file, native = TRUE)
# Create a dummy data frame for plotting, plot and convert to a "gtable"
data <- data.frame(x = c(0, 0), y = c(1, 1))
dummy_hnd <- ggplot(data, aes(x, y)) +  geom_point()
dummy_hnd <- ggplotGrob(dummy_hnd)
# Save logo as grob object
grob <- grid::rasterGrob(image, x = 0, y = 0, just = c('left', 'bottom'), width = 1, height = 1)
# Insert grob in gtable
dummy_hnd <- gtable::gtable_add_grob( dummy_hnd, grob, t = 1, l = 1, b = dim(dummy_hnd)[1], r = dim(dummy_hnd)[2] )
# Add grob "logo" as annotation, basically overlaying with void theme on top of the other plot
hnd_A <- ggplot() +
annotation_custom(dummy_hnd, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
theme_void()
hnd_A
# --- COMBINE sub-Figures ------------------------------------------------------
# Place sub-plots together the sub-Figure letter
library("cowplot")
ggdraw()
ggdraw() +
draw_plot(hnd_A, x = 0, y = 0, width = 1, height = 1) +
draw_plot_label(label = c(paste0("A")), size = 17, x = c(0), y = c(1))
# Save location
path_saveFig <- "/Users/mattesa/ZenBook/R/Fecal_Chenomx_results/Figures/"
ggsave( paste0( path_saveFig, "Figure_33_PartialSpearman.tiff"), width=10, height=7.5, dpi=300)
# For the supplementary figure (with rank FAMILY or [[aggreg_at_rank]]) save in different file
# ggsave( paste0( path_saveFig, "Suppl_Figure_4_A.tiff"), width=10, height=7.5, dpi=300)
# --- Load Libraries -----------------------------------------------------------
library(ggplot2)
library(readr)
library(tidyr)
library(tibble)
library(dplyr)
library(PResiduals)
library(tiff)
# General plotting setting
figFontSize <- 10
theme_HeatPlot <- theme(
plot.margin = margin(t=0.3, r=0.5, b=0.5, l=0.3, "cm"),
panel.background = element_blank() ,
panel.grid.minor = element_blank() ,
panel.grid.major.x = element_blank() ,
panel.grid.major.y = element_blank() ,
plot.title  = element_text( color="#222222", size=figFontSize+2, face = "bold" ) ,
axis.title  = element_text( color="#444444", size=figFontSize+1 ) ,
axis.text   = element_text( color="#444444", size=figFontSize   ) ,
axis.ticks  = element_blank(),
legend.position = "none",
legend.background = element_blank() ,
legend.title = element_text(size = figFontSize),
legend.text  = element_text(size = figFontSize-2),
axis.text.x  = element_text(color="#444444", size=figFontSize, angle = 90, hjust=0) ,
axis.text.y  = element_text( color="#444444", size=figFontSize )
)
# ---- Load DATA tables --------------------------------------------------------------
path_2_data  <- "/Users/mattesa/ZenBook/R/Fecal_Chenomx_results/"
# Load ASV table(s) and Metadata
ASV  <- read_tsv( paste0( path_2_data,"Data_Seq/ASV_longit.tsv"),
skip_empty_rows = TRUE ,show_col_types = FALSE,
guess_max  = min( 10 , 300 ) )
TAXO <- read_tsv( paste0( path_2_data,"Data_Seq/TAXO_longit.tsv"),
skip_empty_rows = TRUE ,show_col_types = FALSE,
guess_max  = min( 10 , 300 ) )
MetaData <- read_tsv( paste0(path_2_data, "Data_Seq/META_longit.txt"),
skip_empty_rows = TRUE ,show_col_types = FALSE,
guess_max  = min( 10 , 300 ) )
metabols <- read_tsv( paste0(path_2_data, "Data_NMR/Metabolites_Concentration.txt"),
skip_empty_rows = TRUE ,show_col_types = FALSE,
guess_max  = min( 10 , 300 ) )
# --- PRUNING DATA -------------------------------------------------------------
# --- Pruning MICROBIOME data
# Prune the TAXO table removing descriptive columns and simplifying names
# (e.g., strip off the "__" separator and "DX" prefixes)
TAXO <- TAXO[4:10, -1]
for( ii in seq(1, dim(TAXO)[1]) ){
names <- unlist(TAXO[ ii ,], use.names=FALSE)
temp  <- as.data.frame( sapply( strsplit( names, "__" ), head, 2) )
names <- as.character(as.vector( temp[2,] ))
TAXO[ ii ,] <- as.list(names)
}
# Convert from count feature table to relative abundances (normalized)
ASV <- as.data.frame( dplyr::select( ASV, -c(Sample_ID, Sample_TotReads) ) )
ASV <- ASV/rowSums(ASV)
# Filter taxonomic features with a Rel. abundance less than 0.03%, and in less than 10% of the cohort
thres_abundance  <- 0.0003
thres_freqSample <- 0.010
mask <- unlist( colSums(ASV > thres_abundance) / dim(ASV)[1] >= thres_freqSample, use.names=FALSE )
ASV  <- ASV[,mask]
TAXO <- TAXO[,mask]
# AGGREGATE and reduce ASVs at a specific taxa level ("aggreg_at_rank"),
taxa_rank <- c("Kingdom", "Phyla", "Class", "Order", "Family", "Genus", "Species")
aggreg_at_rank <- "Genus"
reduc_ASVs <- ASV[ ]
reduc_TAXO <- as.data.frame(t(TAXO))
colnames(reduc_TAXO) <- taxa_rank
reduc_TAXO$Sample <- rownames(reduc_TAXO)
# Determine unique_taxa and remove those that are unclassified
drop_feat_named <- read_tsv( paste0(path_2_data, "Data_Seq/Drop_Features_Named.txt") )
drop_feat_named <- drop_feat_named[[1]]
unique_taxa <- unique( unlist( reduc_TAXO[aggreg_at_rank] , use.names=FALSE) )
unique_taxa <- unique_taxa[ ! unlist( lapply( unique_taxa , function(x) any( stringr::str_detect( x ,drop_feat_named)) )) ]
temp <- list()
for (rr in seq(1, length(unique_taxa)) ) {
selecols <- intersect( colnames(reduc_ASVs) , reduc_TAXO[reduc_TAXO[aggreg_at_rank] == unique_taxa[rr], "Sample"] )
temp[[rr]] <- rowSums( data.frame(reduc_ASVs[ , selecols ]) , na.rm=F)
}
reduc_ASVs <- as.data.frame(temp)
colnames(reduc_ASVs) <- unique_taxa
# # Filter taxonomic features with a Rel. abundance less than 0.03%, and in less than 10% of the cohort
# thres_abundance  <- 0.0003
# thres_freqSample <- 0.010
# mask <- unlist( colSums(reduc_ASVs > thres_abundance) / dim(reduc_ASVs)[1] >= thres_freqSample, use.names=FALSE )
# reduc_ASVs <- reduc_ASVs[,mask]
# --- Pruning METABOLITES data
# Reduce the sample names in MetaData to the essentials and match metabolites tables
MetaData$External_ID <- lapply( MetaData$External_ID, function(x) sub( "Exp1_DNA_", "", x ) )
# Subset the samples used for analysis
mask <- metabols$External_ID %in%  MetaData$External_ID
metabols <- metabols[ mask, ]
# Reorganize metabols dataset rows to match the order of MetaData df
metabols$External_ID <- factor( metabols$External_ID, levels=MetaData$External_ID )
metabols <- metabols[ order(metabols$External_ID), ]
# Normalized metabols areas of entire dataset
MB_normal <- metabols[, -c(1)]
MB_normal <- sapply( as.data.frame(t( MB_normal )), function(x) x/sum(x))
MB_normal <- as.data.frame( t( MB_normal ) )
colnames(MB_normal) <- colnames(metabols[, -c(1)] )
rownames(MB_normal) <- seq(1,dim(MB_normal)[1])
# Subset MetaData to the useful response variables and factorize them
sele_cols <- c("Sex", "Exp_TimePoint", "BMI_cat", "Age_Rank", "Height_cat", "Exp_Name")
sub_MetaData <- MetaData %>% dplyr::select( all_of(sele_cols) )
for (ii in seq(1,length(sele_cols))) {
ii_Col <- sele_cols[ii]
sub_MetaData[[ii_Col]] <- MetaData[[ii_Col]] %>% factor()
levels(sub_MetaData[[ii_Col]]) <- seq( 1, length(unique(MetaData[[ii_Col]])))
sub_MetaData[[ii_Col]] <- as.numeric(sub_MetaData[[ii_Col]])
}
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# --- Perform Partial Spearman Correlation ---------------------------------------------
# Bring in the ordered names of Genus and Metabolites, which we use to set
# consistent order of row-cols in the heatplot
metabo_Ranking <- read_tsv( paste0(path_2_data, "Data_NMR/Metabolites_Ranking.txt"),
col_names = TRUE, skip_empty_rows = TRUE ,show_col_types = FALSE,
guess_max  = min( 10 , 300 ) )
microbiome_Ranking <- read_tsv( paste0(path_2_data, "/Res_Tables/uBiome_RelAbu_",aggreg_at_rank,"_byCohort.txt"),
col_names = TRUE, skip_empty_rows = TRUE ,show_col_types = FALSE,
guess_max  = min( 10 , 300 ) )
metabo_Ranking  <- as.data.frame(metabo_Ranking)
sort_metaboRank <- metabo_Ranking$Feature_Name
# Subset the data to limit the number of microbiome features to cross-correlate
sort_microbeRank <- microbiome_Ranking[[aggreg_at_rank]][ 1:51 ]
# Order the microbial features according to the microbiome_Ranking
sub_ASVs   <- reduc_ASVs[ , match(sort_microbeRank, colnames(reduc_ASVs)) ]   # reduc_ASVs[  , 1:51 ]
sub_metabo <- MB_normal
# Keep a list of the original, ordered feature names
ori_ASVs_names   <- colnames(sub_ASVs)
ori_Metabo_names <- colnames(sub_metabo)
# In order to use parametrize the fit.formula in LME or correlation, we must
# adjust the names of the features (columns). Some names start with numbers, and
# some have "-" or "," symbol: those are invalid as variable names in the formula
colnames(sub_ASVs) <- sapply( colnames(sub_ASVs) , function(x)  gsub("\\[", "", x) )
colnames(sub_ASVs) <- sapply( colnames(sub_ASVs) , function(x)  gsub("\\]", "", x) )
colnames(sub_ASVs) <- sapply( colnames(sub_ASVs) , function(x)  gsub(",", "", x) )
colnames(sub_ASVs) <- sapply( colnames(sub_ASVs) , function(x)  gsub(" ", "_", x) )
colnames(sub_ASVs) <- sapply( colnames(sub_ASVs) , function(x)  gsub("-", "", x) )
colnames(sub_metabo) <- sapply( colnames(sub_metabo) , function(x)  gsub("\\[", "", x) )
colnames(sub_metabo) <- sapply( colnames(sub_metabo) , function(x)  gsub("\\]", "", x) )
colnames(sub_metabo) <- sapply( colnames(sub_metabo) , function(x)  gsub(",", "", x) )
colnames(sub_metabo) <- sapply( colnames(sub_metabo) , function(x)  gsub(" ", "_", x) )
colnames(sub_metabo) <- sapply( colnames(sub_metabo) , function(x)  gsub("-", "", x) )
colnames(sub_metabo) <- paste0("m_", colnames(sub_metabo))
# Combine in one data.frame all the features: microbes, metabolites, response var (as.numeric)
combDF   <- cbind( sub_ASVs, sub_metabo, sub_MetaData )
# Create an empty dataframe to store correlation results
corr_long <- data.frame( matrix(ncol=5, nrow = 0))
corr_colnames <- c( "Feat_metabo", "Feat_uBiome", "p_value", "Var", "Corr_Est"  )
# Loop through all x (metabolites) and y (microbe) features, one pair at a time,
# calculate the Partial Spearman Correlation, adjust for grouping variables,
# such as Age, Sex and (random effect) individual ID.
for( xx in  seq(1,dim(sub_metabo)[2]) ){
for( yy in  seq(1,dim(sub_ASVs)[2]) ){
mod_name_metabo <- colnames(sub_metabo)[xx]
mod_name_asv    <- colnames(sub_ASVs)[yy]
# Create the formula for fixed effects
cor.formula <- as.formula(paste0(mod_name_asv," | ",mod_name_metabo," ~ Age_Rank + Sex + Exp_Name"))
# Perform the partial Spearman correlation
pcor.fit <- PResiduals::partial_Spearman( cor.formula, data=combDF,
# fit.x="poisson", fit.y="orm",
fisher=TRUE,  conf.int=0.95)
# Store the key results you wish to save from the correlation model,
# one row at a time for each xx-yy pair of features
corr_long <- rbind( corr_long, c( ori_Metabo_names[xx], ori_ASVs_names[yy],
pcor.fit$TS$TB$pval, pcor.fit$TS$TB$var, pcor.fit$TS$TB$ts))
}
}
# Adjust the columns types and names
corr_long[, 3:5] <- sapply(corr_long[, 3:5], function(x) as.numeric(x))
colnames(corr_long) <- corr_colnames
# Factorize the X and Y feature's names, so that the heatplot rows and cols are fixed consistently with other scripts
corr_long$Feat_uBiome <- factor( corr_long$Feat_uBiome, levels=rev(sort_microbeRank) )
corr_long$Feat_metabo <- factor( corr_long$Feat_metabo, levels=sort_metaboRank )
# *** ADJUST P-VALUE g ****************************************
# - by Bonferroni adjustment
# corr_long$adjusted_p_value <- corr_long$p_value * (dim(sub_ASVs)[2]*dim(sub_metabo)[2])
# - by Benjamin-Hochber adjustment
# corr_long$adjusted_p_value_ORI <- p.adjust(corr_long$p_value, method = "BH")
m <- length(corr_long$p_value)                   # Total number of tests
ranked_p <- rank(corr_long$p_value)          # Ranks of the p-values
sorted_p <- sort(corr_long$p_value)          # Sorted p-values
# NOTE: command >> order(corr_long$p_value) - yield same order as >> sort(corr_long$p_value)
adjusted_p <- rep(NA, m)     # Initialize to store adjusted p-values
# BH adjustment
for (jj in m:1) {
adjusted_p[jj]   <- min( 1 , sorted_p[jj] * m/jj)
if (jj < m) {
adjusted_p[jj] <- min( adjusted_p[jj] , adjusted_p[jj+1])
}
}
corr_long$adjusted_p_value <- adjusted_p[ranked_p]
# **********************************************************************************
# Transform the results into a wide format, more ideal to visualize the key results.
df_wide <- corr_long %>%
select( "Feat_metabo", "Feat_uBiome", "Corr_Est" ) %>%
pivot_wider( names_from  = Feat_metabo,
values_from = Corr_Est  )
# Adjust the data to a matrix format, rownames and columns order
df_wide$Feat_uBiome <- gsub("\\[", "", df_wide$Feat_uBiome)
df_wide$Feat_uBiome <- gsub("\\]", "", df_wide$Feat_uBiome)
corr_wide <- as.data.frame(df_wide)
rownames(corr_wide) <- corr_wide$Feat_uBiome
corr_wide <- corr_wide[ ,-1]
corr_wide <- corr_wide[ , match(sort_metaboRank, colnames(corr_wide)) ]
df_wide <- corr_long %>%
select( "Feat_metabo", "Feat_uBiome", "adjusted_p_value" ) %>%
pivot_wider( names_from  = Feat_metabo,
values_from = adjusted_p_value  )
# Adjust the data to a matrix format, rownames and columns order
pval_wide <- as.data.frame(df_wide)
rownames(pval_wide) <- pval_wide$Feat_uBiome
pval_wide <- pval_wide[ ,-1]
pval_wide <- pval_wide[ , match(sort_metaboRank, colnames(pval_wide)) ]
# +++ Plot the heatmap +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Opt A - Plot using ggplot2
# Opt B - Plot using corrplot library
# Create temp saveing file
path_saveFig <- "/Users/mattesa/ZenBook/R/Fecal_Chenomx_results/Figures/"
tiff_file <- paste0(path_saveFig, "sub_Figure_3_A.tiff")
tiff( tiff_file, res=200, pointsize=7, width=2800, height=2100)
# corrplot::corrplot( as.matrix(corr_wide),
#                     p.mat=as.matrix(pval_wide),
#                     sig.level=0.05,
#                     is.corr=F,    # to plot a matrix with corrplot func(), but no operations
#                     insig='blank',  method='circle',
#                     cl.pos='n', tl.col='#4d4d4d',
#                     tl.cex = 2)
# dev.off()
corrplot::corrplot( as.matrix(corr_wide),
p.mat=as.matrix(pval_wide),
sig.level=0.05,
is.corr=F,    # to plot a matrix with corrplot func(), but no operations
insig = 'label_sig' ,  method='circle',
cl.pos='n', tl.col='#4d4d4d',
tl.cex = 2)
dev.off()
# Re-import plot as TIFF image
image <- tiff::readTIFF( tiff_file, native = TRUE)
# Create a dummy data frame for plotting, plot and convert to a "gtable"
data <- data.frame(x = c(0, 0), y = c(1, 1))
dummy_hnd <- ggplot(data, aes(x, y)) +  geom_point()
dummy_hnd <- ggplotGrob(dummy_hnd)
# Save logo as grob object
grob <- grid::rasterGrob(image, x = 0, y = 0, just = c('left', 'bottom'), width = 1, height = 1)
# Insert grob in gtable
dummy_hnd <- gtable::gtable_add_grob( dummy_hnd, grob, t = 1, l = 1, b = dim(dummy_hnd)[1], r = dim(dummy_hnd)[2] )
# Add grob "logo" as annotation, basically overlaying with void theme on top of the other plot
hnd_A <- ggplot() +
annotation_custom(dummy_hnd, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
theme_void()
hnd_A
# --- COMBINE sub-Figures ------------------------------------------------------
# Place sub-plots together the sub-Figure letter
library("cowplot")
ggdraw()
ggdraw() +
draw_plot(hnd_A, x = 0, y = 0, width = 1, height = 1) +
draw_plot_label(label = c(paste0("A")), size = 17, x = c(0), y = c(1))
# +++ Plot the heatmap +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Opt A - Plot using ggplot2
# Opt B - Plot using corrplot library
# Create temp saveing file
path_saveFig <- "/Users/mattesa/ZenBook/R/Fecal_Chenomx_results/Figures/"
tiff_file <- paste0(path_saveFig, "sub_Figure_3_A.tiff")
tiff( tiff_file, res=200, pointsize=7, width=2800, height=2100)
# corrplot::corrplot( as.matrix(corr_wide),
#                     p.mat=as.matrix(pval_wide),
#                     sig.level=0.05,
#                     is.corr=F,    # to plot a matrix with corrplot func(), but no operations
#                     insig='blank',  method='circle',
#                     cl.pos='n', tl.col='#4d4d4d',
#                     tl.cex = 2)
# dev.off()
corrplot::corrplot( as.matrix(corr_wide),
p.mat=as.matrix(pval_wide),
sig.level=0.05,
is.corr=F,    # to plot a matrix with corrplot func(), but no operations
insig = 'blank' ,  method='circle',
cl.pos='n', tl.col='#4d4d4d',
tl.cex = 2)
dev.off()
# Re-import plot as TIFF image
image <- tiff::readTIFF( tiff_file, native = TRUE)
# Create a dummy data frame for plotting, plot and convert to a "gtable"
data <- data.frame(x = c(0, 0), y = c(1, 1))
dummy_hnd <- ggplot(data, aes(x, y)) +  geom_point()
dummy_hnd <- ggplotGrob(dummy_hnd)
# Save logo as grob object
grob <- grid::rasterGrob(image, x = 0, y = 0, just = c('left', 'bottom'), width = 1, height = 1)
# Insert grob in gtable
dummy_hnd <- gtable::gtable_add_grob( dummy_hnd, grob, t = 1, l = 1, b = dim(dummy_hnd)[1], r = dim(dummy_hnd)[2] )
# Add grob "logo" as annotation, basically overlaying with void theme on top of the other plot
hnd_A <- ggplot() +
annotation_custom(dummy_hnd, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
theme_void()
hnd_A
# --- COMBINE sub-Figures ------------------------------------------------------
# Place sub-plots together the sub-Figure letter
library("cowplot")
ggdraw()
ggdraw() +
draw_plot(hnd_A, x = 0, y = 0, width = 1, height = 1) +
draw_plot_label(label = c(paste0("A")), size = 17, x = c(0), y = c(1))
# Save location
path_saveFig <- "/Users/mattesa/ZenBook/R/Fecal_Chenomx_results/Figures/"
ggsave( paste0( path_saveFig, "Figure_33_PartialSpearman.tiff"), width=10, height=7.5, dpi=300)
# For the supplementary figure (with rank FAMILY or [[aggreg_at_rank]]) save in different file
# ggsave( paste0( path_saveFig, "Suppl_Figure_4_A.tiff"), width=10, height=7.5, dpi=300)
# Opt B - Plot using corrplot library
# Create temp saveing file
path_saveFig <- "/Users/mattesa/ZenBook/R/Fecal_Chenomx_results/Figures/"
tiff_file <- paste0(path_saveFig, "sub_Figure_3_A.tiff")
tiff( tiff_file, res=200, pointsize=7, width=2800, height=2100)
# corrplot::corrplot( as.matrix(corr_wide),
#                     p.mat=as.matrix(pval_wide),
#                     sig.level=0.05,
#                     is.corr=F,    # to plot a matrix with corrplot func(), but no operations
#                     insig='blank',  method='circle',
#                     cl.pos='n', tl.col='#4d4d4d',
#                     tl.cex = 2)
# dev.off()
corrplot::corrplot( as.matrix(corr_wide),
p.mat=as.matrix(pval_wide),
sig.level=0.05,
is.corr=F,    # to plot a matrix with corrplot func(), but no operations
insig='label_sig' ,  method='color',
cl.pos='n', tl.col='#4d4d4d',
tl.cex = 2)
dev.off()
# Re-import plot as TIFF image
image <- tiff::readTIFF( tiff_file, native = TRUE)
# Create a dummy data frame for plotting, plot and convert to a "gtable"
data <- data.frame(x = c(0, 0), y = c(1, 1))
dummy_hnd <- ggplot(data, aes(x, y)) +  geom_point()
dummy_hnd <- ggplotGrob(dummy_hnd)
# Save logo as grob object
grob <- grid::rasterGrob(image, x = 0, y = 0, just = c('left', 'bottom'), width = 1, height = 1)
# Insert grob in gtable
dummy_hnd <- gtable::gtable_add_grob( dummy_hnd, grob, t = 1, l = 1, b = dim(dummy_hnd)[1], r = dim(dummy_hnd)[2] )
# Add grob "logo" as annotation, basically overlaying with void theme on top of the other plot
hnd_A <- ggplot() +
annotation_custom(dummy_hnd, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
theme_void()
hnd_A
# --- COMBINE sub-Figures ------------------------------------------------------
# Place sub-plots together the sub-Figure letter
library("cowplot")
ggdraw()
ggdraw() +
draw_plot(hnd_A, x = 0, y = 0, width = 1, height = 1) +
draw_plot_label(label = c(paste0("A")), size = 17, x = c(0), y = c(1))
# Save location
path_saveFig <- "/Users/mattesa/ZenBook/R/Fecal_Chenomx_results/Figures/"
ggsave( paste0( path_saveFig, "Figure_33_PartialSpearman.tiff"), width=10, height=7.5, dpi=300)
# For the supplementary figure (with rank FAMILY or [[aggreg_at_rank]]) save in different file
# ggsave( paste0( path_saveFig, "Suppl_Figure_4_A.tiff"), width=10, height=7.5, dpi=300)
corrplot::corrplot( as.matrix(corr_wide),
p.mat=as.matrix(pval_wide),
sig.level=0.05,
is.corr=F,    # to plot a matrix with corrplot func(), but no operations
insig='blank' ,  method='circle',
cl.pos='n', tl.col='#4d4d4d',
tl.cex = 2)
dev.off()
# Re-import plot as TIFF image
image <- tiff::readTIFF( tiff_file, native = TRUE)
# Create a dummy data frame for plotting, plot and convert to a "gtable"
data <- data.frame(x = c(0, 0), y = c(1, 1))
dummy_hnd <- ggplot(data, aes(x, y)) +  geom_point()
dummy_hnd <- ggplotGrob(dummy_hnd)
# Save logo as grob object
grob <- grid::rasterGrob(image, x = 0, y = 0, just = c('left', 'bottom'), width = 1, height = 1)
# Insert grob in gtable
dummy_hnd <- gtable::gtable_add_grob( dummy_hnd, grob, t = 1, l = 1, b = dim(dummy_hnd)[1], r = dim(dummy_hnd)[2] )
# Add grob "logo" as annotation, basically overlaying with void theme on top of the other plot
hnd_A <- ggplot() +
annotation_custom(dummy_hnd, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
theme_void()
hnd_A
# --- COMBINE sub-Figures ------------------------------------------------------
# Place sub-plots together the sub-Figure letter
library("cowplot")
ggdraw()
ggdraw() +
draw_plot(hnd_A, x = 0, y = 0, width = 1, height = 1) +
draw_plot_label(label = c(paste0("A")), size = 17, x = c(0), y = c(1))
# Save location
path_saveFig <- "/Users/mattesa/ZenBook/R/Fecal_Chenomx_results/Figures/"
ggsave( paste0( path_saveFig, "Figure_33_PartialSpearman.tiff"), width=10, height=7.5, dpi=300)
# For the supplementary figure (with rank FAMILY or [[aggreg_at_rank]]) save in different file
# ggsave( paste0( path_saveFig, "Suppl_Figure_4_A.tiff"), width=10, height=7.5, dpi=300)
corrplot::corrplot( as.matrix(corr_wide),
p.mat=as.matrix(pval_wide),
sig.level=0.05,
is.corr=F,    # to plot a matrix with corrplot func(), but no operations
insig='blank' ,  method='pie',
cl.pos='n', tl.col='#4d4d4d',
tl.cex = 2)
dev.off()
# Re-import plot as TIFF image
image <- tiff::readTIFF( tiff_file, native = TRUE)
# Create a dummy data frame for plotting, plot and convert to a "gtable"
data <- data.frame(x = c(0, 0), y = c(1, 1))
dummy_hnd <- ggplot(data, aes(x, y)) +  geom_point()
dummy_hnd <- ggplotGrob(dummy_hnd)
# Save logo as grob object
grob <- grid::rasterGrob(image, x = 0, y = 0, just = c('left', 'bottom'), width = 1, height = 1)
# Insert grob in gtable
dummy_hnd <- gtable::gtable_add_grob( dummy_hnd, grob, t = 1, l = 1, b = dim(dummy_hnd)[1], r = dim(dummy_hnd)[2] )
# Add grob "logo" as annotation, basically overlaying with void theme on top of the other plot
hnd_A <- ggplot() +
annotation_custom(dummy_hnd, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
theme_void()
hnd_A
# --- COMBINE sub-Figures ------------------------------------------------------
# Place sub-plots together the sub-Figure letter
library("cowplot")
ggdraw()
ggdraw() +
draw_plot(hnd_A, x = 0, y = 0, width = 1, height = 1) +
draw_plot_label(label = c(paste0("A")), size = 17, x = c(0), y = c(1))
# Save location
path_saveFig <- "/Users/mattesa/ZenBook/R/Fecal_Chenomx_results/Figures/"
ggsave( paste0( path_saveFig, "Figure_33_PartialSpearman.tiff"), width=10, height=7.5, dpi=300)
# For the supplementary figure (with rank FAMILY or [[aggreg_at_rank]]) save in different file
# ggsave( paste0( path_saveFig, "Suppl_Figure_4_A.tiff"), width=10, height=7.5, dpi=300)
